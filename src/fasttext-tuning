#!/usr/bin/env python

import argparse

from genetics import *


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='Genetic Algorithm to find fasttext hyperparameters')

    parser.add_argument('-n', '--n-individuals', type=int, default=3,
                        help='Number of individuals in the population')
    parser.add_argument('-r', '--n-rounds', type=int, default=2,
                        help='Number of rounds of procreation')
    parser.add_argument('-l', '--good-label', type=str, default='clickbait', help='')
    parser.add_argument('-train', type=str, default='train', help='fasttext train file')
    parser.add_argument('-test', type=str, default='test', help='fasttext test file')
    parser.add_argument('-m', '--model', type=str, required=True, help='fasttext model generated')
    parser.add_argument('-b', '--p-best', type=float, default=0.5,
                        help='Proportion of the best individuals kept')
    parser.add_argument('--mix-rate', type=float, default=0.1,
                        help='Probability for a non-fit individual to be chosen for next round')
    parser.add_argument('--mutation', type=float, default=0.05,
                        help='Probability of having a mutation for a particular gene')
    parser.add_argument('--n-tests', type=int, default=1,
                        help='Number of training/testing done for every model (the bigger it is, the more it takes time and the more accurate it is)')

    args = parser.parse_args()

    params = dict()
    params['epoch'] = [1, 5, 10, 15, 20, 25, 30, 35]
    params['lr'] = [i/10 for i in range(1, 11)]
    params['min_count'] = [1, 10, 20]
    params['word_ngrams'] = [1, 2, 3]

    experience = Experience(params,
                            args.n_individuals,
                            n_rounds=args.n_rounds,
                            good_label=args.good_label,
                            train_file=args.train,
                            test_file=args.test,
                            p_best=args.p_best,
                            mutation=args.mutation,
                            mix_rate=args.mix_rate,
                            n_tests=args.n_tests)

    best = experience.launch()
    best.save(args.model)
